package smart;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Arrays;

public class SpeedComparison {

	public static void main(String[] args){
		rigourousTesting();
	}
	
	private static void rigourousTesting(){
		int numVariables[] = {4, 5, 120, 60, 70, 150, 80, 50, 130, 10, 15, 30, 100, 40, 160, 20, 170};//, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, };
		int numExpressions[] = {500, 1000};
		
		int batches = 100;
		int perBatch = 10;
		
		RandomPredicateGenerator rpg = new RandomPredicateGenerator(numExpressions, numVariables, batches * perBatch);
		PrintWriter pw;
		try {
			pw = new PrintWriter(new File("RigorousResults.txt"));
		} catch (FileNotFoundException fnfe){
			return;
		}
		
		int[][][] timing = new int[numVariables.length][numExpressions.length][batches];
		for(int i = 0; i < numVariables.length; i++){
			for(int j = 0; j < numExpressions.length; j++){
				for(int batch = 0; batch < batches; batch++){
					ThreeSATPredicate[] preds = new ThreeSATPredicate[perBatch];
					boolean[][] results = new boolean[perBatch][numVariables[i]];
					for(int k = 0; k < perBatch; k++){
						preds[k] = rpg.read();
					}
					long l = System.currentTimeMillis();
					for(int k = 0; k < perBatch; k++){
						PredicateSolver ps = new PredicateSolver(preds[k]);
						results[k] = ps.solve();
					}
					timing[i][j][batch] = (int) (System.currentTimeMillis() - l);
					pw.println(numVariables[i]+ ", " + numExpressions[j] + ", " + timing[i][j][batch]);
					for (int k = 0; k < perBatch; k++){
						if (results[k] != null){
							if (!preds[k].satisfiedBy(results[k])){
								System.err.println("NOT SATISFIED!!!! " + preds[k].toString() + " " + Arrays.toString(results[k]));
							}
						}
					}
				}
				System.out.println(Arrays.deepToString(timing));
			}	
		}
		pw.close();	
	}
	
	private static void printProgression(){
		String result = "{";
		for(int i = 400; i > 3; i--){
			result += i + ", ";
		}
		result += "};";
		System.out.println(result);
	}
	
	public static void speedProgressionTest(){
	    int numVariables[] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999};
	    int numExpressions[] = {1000};
	    int n = 100;
	    
	    RandomPredicateGenerator rpg = new RandomPredicateGenerator(numExpressions, numVariables, n);
	    
	    int[][] timing = new int[numVariables.length][numExpressions.length];
		for(int i = 0; i < numVariables.length; i++){
			for(int j = 0; j < numExpressions.length; j++){
				
				ThreeSATPredicate[] preds = new ThreeSATPredicate[n];
				boolean[][] results = new boolean[n][numVariables[i]];
				for(int k = 0; k < n; k++){
					preds[k] = rpg.read();
				}
				long l = System.currentTimeMillis();
				for(int k = 0; k < n; k++){
					PredicateSolver ps = new PredicateSolver(preds[k]);
					results[k] = ps.solve();
				}
				timing[i][j] += (int) (System.currentTimeMillis() - l);
				for (int k = 0; k < n; k++){
					if (results[k] != null){
						if (!preds[k].satisfiedBy(results[k])){
							System.err.println("NOT SATISFIED!!!! " + preds[k].toString() + " " + Arrays.toString(results[k]));
						}
					}
				}
				System.out.println(Arrays.deepToString(timing));
			}	
		}
	    /**
	     * THIS ALGORITHM IS EXPONENTIAL. (Num Vars = K + 3, N = 100, Time in millis)
	     * [[73], [81], [52], [55], [38], [43], [38], [34], [36], [22], [17], [24], [34], [28], [19], [20], [26], [25], [27], [25], [32], [37], [42], [42], [41], [44], [48], [41], [35], [44], [42], [47], [43], [47], [43], [49], [49], [53], [51], [61], [63], [68], [60], [61], [69], [66], [62], [67], [66], [78], [68], [77], [75], [88], [81], [116], [105], [139], [108], [111], [89], [91], [98], [96], [100], [96], [110], [103], [107], [113], [109], [113], [119], [133], [126], [121], [125], [133], [137], [132], [142], [138], [142], [138], [153], [152], [157], [148], [169], [166], [160], [159], [162], [176], [171], [166], [169], [178], [196], [219], [239], [200], [202], [193], [208], [206], [214], [211], [230], [223], [222], [263], [257], [254], [259], [272], [308], [288], [292], [303], [283], [267], [258], [272], [299], [321], [302], [288], [286], [289], [293], [302], [312], [366], [306], [323], [324], [340], [342], [399], [384], [336], [365], [350], [350], [351], [373], [400], [429], [372], [384], [386], [386], [406], [426], [408], [427], [510], [453], [521], [514], [503], [467], [471], [479], [490], [505], [500], [503], [506], [541], [530], [628], [542], [589], [696], [555], [575], [604], [572], [645], [710], [743], [696], [636], [638], [660], [666], [649], [756], [692], [685], [689], [719], [710], [746], [721], [792], [726], [820], [795], [781], [960], [903], [917], [883], [820], [896], [936], [986], [990], [1008], [965], [968], [926], [941], [1049], [1076], [1056], [1027], [1044], [1161], [1132], [1069], [1030], [1025], [1038], [1072], [1104], [1095], [1219], [1107], [1105], [1112], [1146], [1170], [1298], [1247], [1324], [1262], [1242], [1233], [1245], [1392], [1420], [1473], [1346], [1417], [1420], [1407], [1377], [1447], [1479], [1438], [1442], [1495], [1519], [1511], [1618], [1679], [1660], [1607], [1641], [1627], [1672], [1657], [1683], [1712], [1734], [1784], [1885], [2502], [1821], [2061], [1855], [1973], [1949], [3665], [2334], [2404], [2436], [2630], [3718], [7395], [3490], [20213], [2591], [4118], [11663], [6248], [7153], [5675], [12719], [16515], [42182], [26787], [32675], [44737], [13271], [66058]
	     */
	}
	
	public static void speedTest(){	
		int[] numVariables = {15, 20, 25, 30};
		int[] numExpressions = {50, 100, 200, 400};
	
		int batches = 100;
		int perBatch = 100;
		
		RandomPredicateGenerator rpg = new RandomPredicateGenerator(numExpressions, numVariables, batches * perBatch);
		
		int[][] timing = new int[numVariables.length][numExpressions.length];
		for(int i = 0; i < numVariables.length; i++){
			for(int j = 0; j < numExpressions.length; j++){
				for(int batch = 0; batch < batches; batch++){
					ThreeSATPredicate[] preds = new ThreeSATPredicate[perBatch];
					boolean[][] results = new boolean[perBatch][numVariables[i]];
					for(int k = 0; k < perBatch; k++){
						preds[k] = rpg.read();
					}
					long l = System.currentTimeMillis();
					for(int k = 0; k < perBatch; k++){
						PredicateSolver ps = new PredicateSolver(preds[k]);
						results[k] = ps.solve();
					}
					timing[i][j] += (int) (System.currentTimeMillis() - l);
					for (int k = 0; k < perBatch; k++){
						if (results[k] != null){
							if (!preds[k].satisfiedBy(results[k])){
								System.err.println("NOT SATISFIED!!!! " + preds[k].toString() + " " + Arrays.toString(results[k]));
							}
						}
					}
				}
				System.out.println(Arrays.deepToString(timing));
			}	
		}
	}
	
	/*              IMPORTANT RESULTS (N = 10,000)
	
	               E X P R E S S I O N S
	   
	             50    100     200     400
	V          
    A      7    2672    3749    9283   15747 
    R      8    2344    3990    8179   16748 
    I      9    2497    4610    9140   18400 
    A     10    2915    4975    9918   21555 
    B     11    3292    5610   12591   24232 
    L     12    3834    6184   12115   25255 
    E     13    3634    6584   13226   28681 
    S     14    4477    9869   15667   31599
	      15    6866    8455   16442   33657
	      20    6657   10501   21045   44542
	    
	      		^
	 			|
	 	   	   ???
	RAW:   
[[2672, 3749, 9283, 15747], [2344, 3990, 8179, 16748], [2497, 4610, 9140, 18400], [2915, 4975, 9918, 21555], [3292, 5610, 12591, 24232], [3834, 6184, 12115, 25255], [3634, 6584, 13226, 28681], [4477, 9869, 15667, 31599]]
*/
	
	
	
	
/* ***** MEDIOCRE RESULTS (N = 10,000) (March 31st, 10:24 AM) *********** (Not much different) ******************
	
                    E X P R E S S I O N S

                  50     100      200     400
    V          
    A      15    5193    7459    15140   30717 
    R      20    6182   10424    23404   44472
    S      25    9835   14608    25878   55577
           30   11541   15891    31387   67389
        
 RAW
[[5193, 7459, 15140, 30717], [6182, 10424, 23404, 44472], [9835, 14608, 25878, 55577], [11541, 15891, 31387, 67389]]
*/
	
	
	
	
/* ***** STRANGE RESULTS (N = 10,000) (March 31st, 10:59 AM) *********** (Pretty Unexplicable...) ******************
	
                     E X P R E S S I O N S

                  50     100      200     400
    V          
    A      15    2502    1670     5780    5433
    R      20    8538    7113     7001    7318
    S      25   12567    9999     9208    9248
           30   17957   13304    11717   11320

RAW
[[2502, 1670, 5780, 5433], [8538, 7113, 7001, 7318], [12567, 9999, 9208, 9248], [17957, 13304, 11717, 11320]]
*/
	
}
